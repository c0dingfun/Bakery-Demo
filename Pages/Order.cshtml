@* "{id:int}" defines route template, for the route parameter for the page *@
@page "{id:int}"
@model Bakery.Pages.OrderModel
@{
    ViewData["Title"] = "Place Your Order";
}

<ol id="orderProcess">
    <li> <span class="step-number">1</span>
        Choose Item
    </li>
    <li clss="Current">
        <span class="step-number">2</span>
        Detailss &amp; Submit
    </li>
    <li>
        <span class="step-number">3</span>
        Receipt
    </li>
</ol>

<h1>Place Your Oder: @Model.Product.Name</h1>

@* HH: Begin *@
<form method="post">
    <div class="row">
        <div class="col-3">
            <img src="~/Images/Products/Thumbnails/@Model.Product.ImageName"
                 class="img-fluid img-thumbnail"
                 alt="Image of @Model.Product.Name"/>
        </div>

        <div class="col-9">
            <ul class="orderPageList" data-role="listview">
                <li>
                    <div>
                        <p class="description">@Model.Product.Description</p>
                    </div>
                </li>

                @* PageModel properties are passed to the asp-for attributes on the input tag helpers *@
                @* Then, the asp-for tag helper render the correct name attribute in the generate HTML,
                so that model binding works seamlessly. The <input>'s type attribute in generate HTML,
                is the type of the Model property *@

                <li class="email">
                    <div class="form-group">
                        <label asp-for="OrderEmail"></label>
                        <input asp-for="OrderEmail" class="form-control form-control-sm">
                        <span asp-validation-for="OrderEmail"></span>
                    </div>
                </li>

                <li class="shipping">
                    <div class="form-group">
                        <label asp-for="OrderShipping"></label>
                        <textarea row="4" asp-for="OrderShipping" 
                            class="form-control form-control-sm">
                        </textarea>
                        <span asp-validation-for="OrderShipping"></span>
                    </div>
                </li>

                <li class="quantity">
                    <div class="form-group row">
                        <label asp-for="OrderQuantity" class="col-1 col-form-label"></label>
                        <input asp-for="OrderQuantity" class="form-control form-control-sm">
                        x
                        <span class="order-calc" id="orderPrice">@Model.Product.Price.ToString("f")</span>
                        <span class="order-calc" id="orderTotal">@Model.Product.Price.ToString("f")</span>
                        <span asp-validation-for="OrderQuantity"></span>
                    </div>

                </li>
            </ul>
            <p class="actions">
                <input type="hidden" asp-for="Product.Id"/>
                <button class="btn btn-danger order-button">Place Order</button>
            </p>
        </div>
    </div>
</form>
@* HH: End  *@

@section scripts{
    @* HH: Enable clien-side validation *@

    <partial name="_ValidationScriptsPartial"></partial>

    <script type="text/javascript">
        $(function(){

            var price=parseFloat($("#orderPrice").text()).toFixed(2),
                total= $("#orderTotal"),
                orderQty=$("#OrderQuantity");

            orderQty.on('change', function(){
                var quantity = parseInt(orderQty.val());
                if (!quantity || quantity < 1)
                {
                    orderQty.val(1);
                    quantity = 1;
                } else if (quantity.toString() !== orderQty.val())
                {
                    orderQty.val(quantity);
                }
                total.text("$" + (price * quantity).toFixed(2));
            });
        });
    </script>

}
